{"version":3,"sources":["webpack:///./src/components/BlogBio.tsx","webpack:///./src/templates/BlogPost.tsx"],"names":["Container","rhythm","BlogBio","ProfileImage","href","Title","Subtitle","scale","fontSize","lineHeight","BlogNavigation","HorizontalLine","BlogPostTemplate","data","location","pageContext","post","markdownRemark","previous","next","slug","siteUrl","site","siteMetadata","frontmatter","date","description","devToLink","featuredImage","title","featuredImageSrc","childImageSharp","fixed","src","undefined","twitterDiscussUrl","encodeURIComponent","Layout","excerpt","image","pageTitle","timeToRead","dangerouslySetInnerHTML","__html","html","ExternalLink","linkTo","to","fields","rel","pageQuery"],"mappings":"iMAMMA,EAAY,mBAAH,mBAAG,CAAH,8BAEIC,YAAO,KAFX,KAKA,SAASC,IACtB,OACE,YAACF,EAAD,KACE,YAACG,EAAA,EAAD,MACA,6HAIE,iBAAGC,KAAI,uCAAP,2B,0KCPD,IAAMC,EAAQ,kBAAH,oBAAG,CAAH,4CAIZC,EAAW,iBAAH,oBAAG,CAAH,aACCC,aAAM,IAAQC,SADf,gBAEGD,aAAM,IAAQE,WAFjB,gCAIKR,YAAO,GAJZ,eAKEA,aAAQ,GALV,KAQRS,EAAiB,kBAAH,oBAAG,CAAH,gHAQdC,EAAiB,kBAAH,oBAAG,CAAH,iBACDV,YAAO,GADN,eAEJA,YAAO,GAFH,KAoCL,SAASW,EAAT,GAAkE,IAAtCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,YACnDC,EAAOH,EAAKI,eACVC,EAAyBH,EAAzBG,SAAUC,EAAeJ,EAAfI,KAAMC,EAASL,EAATK,KAChBC,EAAYR,EAAKS,KAAKC,aAAtBF,QAHuE,EAIhBL,EAAKQ,YAA5DC,EAJuE,EAIvEA,KAAMC,EAJiE,EAIjEA,YAAaC,EAJoD,EAIpDA,UAAWC,EAJyC,EAIzCA,cAAeC,EAJ0B,EAI1BA,MAE/CC,EAAmBF,EAAa,GAC/BP,EAAUO,EAAcG,gBAAgBC,MAAMC,SACjDC,EAEEC,EAAoB,uCAAuCC,mBAAmB,4BACtDhB,GAG9B,OACE,YAACiB,EAAA,EAAD,CAAQvB,SAAUA,GAChB,YAAC,IAAD,CACEY,YAAaA,GAAeV,EAAKsB,QACjCC,MAAOT,EACPhB,SAAUA,EACV0B,UAAWX,IAGb,2BACE,YAACxB,EAAD,KAAQwB,GACR,YAACvB,EAAD,KACGmB,EADH,MACYT,EAAKyB,WADjB,gBAGA,mBAAKC,wBAAyB,CAAEC,OAAQ3B,EAAK4B,QAL/C,oBAMoB,IAClB,YAACC,EAAA,EAAD,CAAcC,OAAQX,GAAtB,cACCR,GACC,8BACG,OACD,YAACkB,EAAA,EAAD,CAAcC,OAAQnB,GAAtB,qBAXN,IAeE,YAAChB,EAAD,OAGF,YAACT,EAAD,MAEA,YAACQ,EAAD,KACE,sBACGQ,GACC,YAAC,OAAD,CAAM6B,GAAI7B,EAAS8B,OAAO5B,KAAM6B,IAAI,QAApC,KACK/B,EAASM,YAAYK,QAI9B,sBACGV,GACC,YAAC,OAAD,CAAM4B,GAAI5B,EAAK6B,OAAO5B,KAAM6B,IAAI,QAC7B9B,EAAKK,YAAYK,MADpB,SAUL,IAAMqB,EAAY","file":"component---src-templates-blog-post-tsx-b26fa0dabdc97753e7d6.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { rhythm } from '../utils/typography'\nimport ProfileImage from './ProfileImage'\n\nconst Container = styled.div`\n  display: flex;\n  margin-bottom: ${rhythm(2.5)};\n`\n\nexport default function BlogBio() {\n  return (\n    <Container>\n      <ProfileImage />\n      <p>\n        Kenneth Skovhus is a full-stack engineer and music recording enthusiast from\n        Copenhagen, Denmark.\n        {` `}\n        <a href={`https://twitter.com/kenneth_skovhus`}>Follow him on Twitter</a>\n      </p>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport styled from '@emotion/styled'\n\nimport BlogBio from '../components/BlogBio'\nimport ExternalLink from '../components/ExternalLink'\nimport Layout from '../components/Layout'\nimport SEO from '../components/Seo'\nimport { rhythm, scale } from '../utils/typography'\n\nimport './BlogPost.css'\n\nexport const Title = styled.h1`\n  margin-top: 3rem;\n`\n\nconst Subtitle = styled.p`\n  font-size: ${scale(-1 / 5).fontSize};\n  line-height: ${scale(-1 / 5).lineHeight};\n  display: block;\n  margin-bottom: ${rhythm(1)};\n  margin-top: ${rhythm(-1)};\n`\n\nconst BlogNavigation = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  padding: 0;\n`\n\nconst HorizontalLine = styled.hr`\n  margin-bottom: ${rhythm(1)};\n  margin-top: ${rhythm(1)};\n`\n\n// FIXME: these should really be auto generated by Gatsby tooling\ntype Props = {\n  data: {\n    markdownRemark: {\n      excerpt: string\n      html: string\n      timeToRead: string // FIXME: use\n      frontmatter: {\n        date: string\n        description?: string\n        devToLink?: string\n        title: string\n        featuredImage?: {\n          childImageSharp: {\n            fixed: {\n              src: string\n            }\n          }\n        }\n      }\n    }\n    site: {\n      siteMetadata: {\n        siteUrl: string\n      }\n    }\n  }\n  location: Location\n  pageContext: any\n}\n\nexport default function BlogPostTemplate({ data, location, pageContext }: Props) {\n  const post = data.markdownRemark\n  const { previous, next, slug } = pageContext\n  const { siteUrl } = data.site.siteMetadata\n  const { date, description, devToLink, featuredImage, title } = post.frontmatter\n\n  const featuredImageSrc = featuredImage\n    ? `${siteUrl}${featuredImage.childImageSharp.fixed.src}`\n    : undefined\n\n  const twitterDiscussUrl = `https://mobile.twitter.com/search?q=${encodeURIComponent(\n    `https://skovhus.github.io${slug}`\n  )}`\n\n  return (\n    <Layout location={location}>\n      <SEO\n        description={description || post.excerpt}\n        image={featuredImageSrc}\n        location={location}\n        pageTitle={title}\n      />\n\n      <article>\n        <Title>{title}</Title>\n        <Subtitle>\n          {date} • {post.timeToRead} minute read\n        </Subtitle>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        Discuss this post{' '}\n        <ExternalLink linkTo={twitterDiscussUrl}>on Twitter</ExternalLink>\n        {devToLink && (\n          <>\n            {' or '}\n            <ExternalLink linkTo={devToLink}>on DEV Community</ExternalLink>\n          </>\n        )}\n        .\n        <HorizontalLine />\n      </article>\n\n      <BlogBio />\n\n      <BlogNavigation>\n        <li>\n          {previous && (\n            <Link to={previous.fields.slug} rel=\"prev\">\n              ← {previous.frontmatter.title}\n            </Link>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Link to={next.fields.slug} rel=\"next\">\n              {next.frontmatter.title} →\n            </Link>\n          )}\n        </li>\n      </BlogNavigation>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 200)\n      html\n      timeToRead\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        devToLink\n        featuredImage {\n          childImageSharp {\n            fixed(width: 500, height: 500) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n"],"sourceRoot":""}